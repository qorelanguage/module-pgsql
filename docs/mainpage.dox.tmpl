/** @mainpage %Qore pgsql Module

    @tableofcontents

    Contents of this documentation:
    - @ref intro
    - @ref options
    - @ref trans
    - @ref bind
    - @ref storedprocs
    - @ref releasenotes

    @section intro Introduction

    The pgsql module provides a <a href="www.postgresql.org">PostgreSQL</a> driver to Qore's DBI system, allowing Qore programs to access PostgreSQL databases through the Datasource, DatasourcePool, and SQLStatement classes.

    This module is released under the LGPL 2.1 and is tagged as such in the module's header (meaning it can be loaded unconditionally regardless of how the Qore library was initialized).

    Example of creating a PostgreSQL Datasource:
    @code
$db = new Datasource(SQL::DSPGSQL, $user, $pass, $db, $charset, $hostname, $port);
    @endcode

    This driver supports the following DBI capabilities when compiled against PostgreSQL 7 or better:
    - \c DBI_CAP_TIME_ZONE_SUPPORT
    - \c DBI_CAP_TRANSACTION_MANAGEMENT
    - \c DBI_CAP_CHARSET_SUPPORT
    - \c DBI_CAP_LOB_SUPPORT
    - \c DBI_CAP_STORED_PROCEDURES
    - \c DBI_CAP_BIND_BY_VALUE
    - \c DBI_CAP_HAS_EXECRAW
    - \c DBI_CAP_HAS_STATEMENT
    - \c DBI_CAP_HAS_SELECT_ROW
    - \c DBI_CAP_HAS_NUMBER_SUPPORT
    - \c DBI_CAP_HAS_OPTION_SUPPORT

    The driver employs efficient binary bindings for all non-text data types and fully supports multidimensional arrays when selecting and binding by value. The driver determines on a per-connection basis by querying server capabilities whether the server uses 8-byte integer or floating-point data for date/time types, and also whether or not a binary day value is included in intervals.

    The Datasource::getServerVersion() method is implemented for this driver and returns an integer giving the major, minor, and sub version numbers in a single integer according to the following formula: 

    @verbatim
major_version * 10000 + minor_version * 100 + sub_version
    @endverbatim

    (For example: \c 90101 = <tt>9.1.1</tt>).

    The Datasource::getClientVersion() method is implemented only when the driver is compiled against the PostgreSQL client library version 9.1 or better, as the PQlibVersion() function was first supplied in that version of the PostgreSQL client library.  Check the @ref Qore::Pgsql::PGSQL_HAVE_GETCLIENTVERSION "PGSQL_HAVE_GETCLIENTVERSION" constant before calling this method with this driver, as if the client library did not support this API at compile time, calling getClientVersion() will cause a \c DBI:PGSQL-GET-CLIENT-VERSION-ERROR exception to be thrown.

    If the function is available, the return value is equal to the return value of the getServerVersion() method described above.

    (For example: \c 90101 = <tt>9.1.1</tt>).

    Like all Qore components, the PostgreSQL DBI driver is thread-safe.

    @section options Driver Options

    When compiled again Qore 0.8.6+ the pgsql driver support the following DBI options:
    - \c "optimal-numbers": return numeric types as an integer if possible, if not as an arbitrary-precision number
    - \c "string-numbers": return numeric types as strings (for backwards-compatibility)
    - \c "numeric-numbers": return numeric types as arbitrary-precision number values

    The default if no other option is explicitly set is \c "optimal-numbers".  Note that this represents a change from previous numbers where numeric values were returned as strings in order to avoid the loss of information.  To set the old behavior, set the \c "string-numbers" option when creating the \c Datasource or \c DatasourcePool object.

    Options can be set in the \c Datasource or \c DatasourcePool constructors as in the following examples:
    @code
    my Dataource $ds("pgsql:user/pass@db%hostname{numeric-numbers}");
    my DataourcePool $dsp("pgsql:user/pass@db%host.internal:5432{optimal-numbers}");
    @endcode

    @section trans Transaction Management

    When the Datasource is not in auto-commit mode, this driver automatically inserts \c "begin" statements at the start of each transaction to provide consistent transaction handling across all Qore DBI drivers; it's not necessary to do this manually.

    Note that an exception while already in a transaction will have the effect that the pgsql connection cannot be used until the transaction is closed; this is different from most other current Qore DBI drivers. An exception in a Datasource::exec() method as the first statement of a transaction will cause an automatic implicit \c "rollback" to be executed to maintain compatibility with other Qore DBI drivers.

    @section bind Binding and Types

    When binding by value, PostgreSQL servers do not convert data types as freely as many other database servers; instead the server throws an error if the bound type does not closely match the expected data type. For example, binding a string or float value to a \c NUMERIC data type will cause an exception to be thrown. To successfully bind by value, either use a PostgreSQL type cast in the SQL text (i.e. \c "::type") or use the pgsql_bind() function to specify the type to bind. See @ref binding_by_value for more information about how types are bound when binding by value with this driver.

    For \c NUMERIC columns, the %d specification in the query string can be used to substitute a numeric value or a literal null directly in the query string, providing the same effect as a bind by value in a very convenient form for the programmer. For example:

    @code
# the %d will be substituted with the value of $id directly in the query text
# or with a "null" in case $id has no value (or is NULL)
my *hash $results = $db.select("select * from table where id = %d", $id);
    @endcode

    Due to the fact that Qore date/time values support time zone information, when PostgreSQL data including a time zone component is converted to a Qore data type, the time zone information is also maintained. Also, Qore date/time values support a microsecond resolution, matching PostgreSQL's microsecond support, so this information is also maintained.

    Note that binding by placeholder is not required or supported by this driver as PostgreSQL returns values directly; Qore DBI placeholder buffer specifications are ignored when the pgsql driver is used.

    When binding arrays, all data types in the Qore list must be identical. When binding multi-dimensional arrays, the number of elements in each list in each array dimension must be the same. These are PostgreSQL restrictions (at least up to version 8.2).

    When retrieving PostgreSQL data, PostgreSQL types are converted to Qore types as per @ref pgsql_to_qore.

    @subsection binding_by_value Binding By Value

    The following table gives data mapping when binding qore types by value. Be aware that PostgreSQL does only limited implicit type conversions when binding by value; to specify other types, either use a PostgreSQL type cast (i.e. \c "::type") or use the pgsql_bind() function.

    |!QoreType|!PostgreSQL Type|!Description
    |\c int|\c INT2, \c INTEGER, \c INT8|Depending on the size of the integer, the appropriate PostgreSQL type is bound. This is to avoid errors by using a type larger than that specified for the column or variable, as converting from a smaller type to a larger type is done automatically by the server.
    |\c float|\c FLOAT88|Qore float data is converted directly to PostgreSQL float8 data.
    |\c string|\c TEXT|The character sencoding is converted to the encoding specified for the connection if necessary.
    |\c bool|\c BOOLEAN|Qore boolean values are converted directly to the PostgreSQL boolean format.
    |\c date|\c INTERVAL, \c TIMESTAMP|Relative date/time values are bound as interval data, absolute date/time values are bound as timestamp data
    |\c binary|\c BYTEA|Qore binary data is bound directly as bytea data.

    @subsection pgsql_to_qore PostgreSQL to Qore Type Mappings
    |!PostgreSQL Type|!Qore Type|!Notes
    |\c BOOLEAN|\c bool|direct conversion
    |\c BYTEA|\c binary|direct conversion
    |\c CHAR|\c string|trailing whitespace is removed
    |\c BPCHAR|\c string|trailing whitespace is removed
    |\c INT8|\c Int|direct conversion
    |\c INTEGER|\c Int|direct conversion
    |\c OID|\c Int|direct conversion
    |\c XID|\c Int|direct conversion
    |\c CID|\c Int|direct conversion
    |\c INT2|\c Int|direct conversion
    |\c TEXT|\c string|direct conversion
    |<tt>CHAR VARYING</tt>|\c string|trailing whitespace is removed
    |\c NAME|\c string|direct conversion
    |\c FLOAT4|\c Float|direct conversion
    |\c FLOAT8|\c Float|direct conversion
    |\c ABSTIME|\c Date (absolute)|direct conversion
    |\c RELTIME|\c Date (relative)|direct conversion to relative seconds
    |\c TIMESTAMP|\c Date (absolute)|When compiled with qore 0.8.0+, microseconds are maintained.
    |<tt>TIMESTAMP WITH TIMEZONE</tt>|\c Date (absolute)|When compiled with qore 0.8.0+, microseconds and time zone information are maintained.
    |\c DATE|\c Date (absolute)|direct conversion
    |\c INTERVAL|\c Date (relative)|direct conversion to relative months, seconds, microseconds (with qore 0.8.0+, otherwise milliseconds), and for servers that send a separate day value, to relative days.
    |\c TIME|\c Date (absolute)|When compiled with qore 0.8.0+, microseconds are maintained. Note that the date portion is set to January 1, 1970, the beginning of the 64-bit qore epoch.
    |<tt>TIME WITH TIMEZONE</tt>|\c Date (absolute)|When compiled with qore 0.8.0+, microseconds and time zone information are maintained. Note that the date portion is set to January 1, 1970, the beginning of the 64-bit qore epoch.
    |\c TINTERVAL|\c string|string format is given in ~PostgreSQL tinterval format ([\c "YYYY-MM-DD hh:mm:ss" \c "YYYY-MM-DD hh:mm:ss"])
    |\c NUMERIC|\c string|To avoid loss of precision, the information is converted to a string
    |\c CASH|\c Float|direct conversion
    |\c MACADDR|\c string|format: <tt>xx:xx:xx:xx:xx:xx</tt>
    |\c INET|\c string|ipv4: <tt>n.n.n.n/net</tt>, ipv6: <tt>x:x:x:x:x:x:x:x/net</tt>
    |\c CIDR|\c string|ipv4: <tt>n.../net</tt>, ipv6: <tt>x:...::/net</tt>
    |\c TID|\c string|format: <tt>(n,n)</tt>
    |\c BIT|\c binary|direct conversion
    |\c VARBIT|\c binary|direct conversion
    |\c POINT|\c string|format: <tt>n,n</tt>
    |\c LSEG|\c string|format: <tt>(n,n),(n,n)</tt>
    |\c BOX|\c string|format: <tt>(n,n),(n,n)</tt>
    |\c PATH|\c string|in PostgreSQL text format depending on path type
    |\c POLYGON|\c string|in PostgreSQL text format for polygons <tt>((n,n),...)</tt>
    |\c CIRCLE|\c string|format: <tt><(n,n),n></tt>

    @section storedprocs Stored Procedures

    Stored procedure execution is supported; the following is an example of a stored procedure call:

    Example PostgreSQL PLPG/SQL function:
    @code
create or replace function int_test(val int4) returns int4 as $$
begin
    return val * 2;
end;
$$ language plpgsql;
   @endcode

   Example Qore code to call this function:
   @code
$result = $db.exec("select int_test(%v)", 11);
printf("%N\n", $result);
   @endcode

   Resulting in:
   @verbatim
hash: (1 member)
  int_test : 22
   @endverbatim

    @section releasenotes Release Notes

    @subsection pgsql20 pgsql Driver Version 2.0

    <b>New Features and Bug Fixes</b>
    - implemented support for the selectRow DBI method
    - implemented support for the prepared statement API
    - implemented support for binding and retrieving "number" types
    - implemented support for the following DBI options:
      - \c "optimal-numbers": return numeric types as an integer if possible, if not as an arbitrary-precision number
      - \c "string-numbers": return numeric types as strings (for backwards-compatibility)
      - \c "numeric-numbers": return numeric types as arbitrary-precision number values
*/
