-----------
Version 2.4
-----------

placeholders and quotes in SQL comments are ignored


-----------
Version 2.3
-----------

treat UNKNOWNOID as string; fixes cases such as selecting string constants (ie "select 'string'")


-----------
Version 2.2
-----------

fixed a bug with the SQLStatement class where bind arguments were not bound on subsequent calls to SQLStatement::exec() or SQLStatement::execArgs()


-----------
Version 2.1
-----------

implemented transparent auto-reconnect to the server if the connection is lost while not in a transaction
driver now claims the DBI_CAP_AUTORECONNECT capability if Qore support the option (with Qore 0.8.7+)
fixed a crashing bug serializing the zero number value (0n) to PostgreSQL's binary decimal representation


-----------
Version 2.0
-----------

implemented the selectRow method
implemented support for the prepared statement API (SQLStatement class)
disable warning and notice messages by default for each connection
with Qore 0.8.6+:
+ implemented support for binding and retrieving "number" types
+ implemented support for the following DBI options:
  + "optimal-numbers": return numeric types as an integer if possible, if not as an arbitrary-precision number
  + "string-numbers": return numeric types as strings (for backwards-compatibility)
  + "numeric-numbers": return numeric types as arbitrary-precision number values
  + "timezone": accepts a string argument that can be either a region name (ex: "Europe/Prague") or a UTC offset (ex: "+01:00") to set the server's time zone rules; this is useful if connecting to a database server in a different time zone.  If this option is not set then the server's time zone is assumed to be the same as the client's time zone
+ the default for the number options is now "optimal-numbers", meaning that NUMERIC or DECIMAL values are retrieved as integers if possible, otherwise an arbitrary-precision number type is returned.


-------------
Version 1.0.6
-------------

compile against PostgresSQL client only (no need for server)
native MS Windows port
fixed build errors for new Linux distributions


-------------
Version 1.0.5
-------------

fixed module version reporting
execRaw() method implemented
updated to use new date/time APIs when compiled against qore 0.8.0+, so time
zone information and microseconds are maintained when binding and retrieving
date/time values


-------------
Version 1.0.4
-------------

added support for setting the port number for connections when used with qore
0.7.5 or greater

fixed functionality on big-endian (most significant byte first) machines

updated query parsing for '%*' placeholders to ignore '%' characters when they
are preceded by an alphanumeric character in order to avoid having to use
backslashes to escape them in SQL functions, etc


-------------
Version 1.0.3
-------------

fixed a bug returning numeric values when the significant value was given as a
round number multiple of 10,000 due to an error decoding internal postgresql
data


-------------
Version 1.0.2
-------------

updated configure to check the directory specified with --prefix first when
looking for dependent libraries


-------------
Version 1.0.1
-------------

fixed module naming and module directory handling to correspond to changes in
qore 0.7.1

made qore 0.7.1 the minimum version for compiling the module


-------------
Version 1.0.0
-------------

Initial release; see README for more information


------------------
all older releases
------------------

----------
Qore 0.6.2
----------

*) "pgsql" module: PostgreSQL driver
the new "pgsql" driver uses efficient binary communication with PostgreSQL
servers for binding and retrieving values from queries.
The driver supports the following features:
* all builtin PostgreSQL data types are supported
* multi-dimensional arrays are supported for binding and retrieving
* is thread-safe
* stored procedure execution is supported
* transaction management is supported
* transparent character encoding conversion is supported if necessary

The driver's name is "pgsql" and the Datasource type constant is SQL::DSPGSQL
ex: $db = new Datasource(DSPGSQL);
ex: $db = new Datasource("pgsql");
